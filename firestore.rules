rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    function isCustomer() {
      return isAuthenticated() && !request.auth.token.admin;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidStatus(status) {
      return ['pending', 'approved', 'rejected', 'completed', 'cancelled'].hasAny([status]);
    }

    // Helper function to check if only OTP fields are being updated
    function isOTPUpdate() {
      let incomingData = request.resource.data;
      let existingData = resource.data;
      let diff = request.resource.data.diff(resource.data);
      
      return diff.affectedKeys().hasOnly(['currentOTP', 'otpGeneratedAt']);
    }

    // Customers collection rules
    match /customers/{customerId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() || 
                   isOwner(customerId) || 
                   isOTPUpdate();
      allow delete: if isAdmin();
    }

    // Inventory collection rules
    match /inventory/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Orders collection rules
    match /orders/{orderId} {
      allow read: if isAdmin() || 
                 (isAuthenticated() && resource.data.customerId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
                   (isAuthenticated() && resource.data.customerId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Card Quotas collection rules
    match /cardQuotas/{quotaId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Customer Issues collection rules
    match /customerIssues/{issueId} {
      allow read: if isAdmin() || 
                 (isAuthenticated() && resource.data.customerId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
                   (isAuthenticated() && resource.data.customerId == request.auth.uid);
    }
  }
}